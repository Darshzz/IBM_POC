//
//  NearByCars_ViewController.swift
//  IBM_POC
//
//  Created by Darshan on 04/05/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoogleMaps

protocol NearByCars_DisplayLogic: AnyObject {
  func displayNearByCars(viewModel: NearByCars_.Fetch.ViewModel)
}

class NearByCars_ViewController: UIViewController {
    
    // MARK: IBOutlet Properties
    @IBOutlet weak var headerView: UIView!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var containerViewMap: UIView!
    
    var mapView: GMSMapView!
    var interactor: NearByCars_BusinessLogic?
    var router: (NSObjectProtocol & NearByCars_RoutingLogic & NearByCars_DataPassing)?
    var viewModel: NearByCars_.Fetch.ViewModel?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    NearByCars_Configurator.configure(viewController: self)
  }
  
  // MARK: View lifecycle
  override func viewDidLoad() {
    super.viewDidLoad()
    fetchNearByCars()
  }
    
    // MARK: Private Methods
    
    // Trigger APi
  private func fetchNearByCars() {
    // Create Request for api
    let request = NearByCars_.Fetch.Request()
    interactor?.fetchNearByCars(request: request)
  }
    
  private func showCarLocationsOnMap() {
    let camera = GMSCameraPosition.camera(withLatitude: viewModel!.nearByCarModel.first!.location.latitude, longitude: viewModel!.nearByCarModel.first!.location.longitude, zoom: 14.0)
    
    //Set default lat and long
    // Initialise GMSMAPView with frame and camera position
    mapView = GMSMapView.map(withFrame: CGRect(x: 0, y: 0, width: containerViewMap.frame.size.width, height: containerViewMap.frame.size.height), camera: camera)
    containerViewMap.addSubview(mapView)
    
    // Set all marker on map with appropriate coordinates
    for model in self.viewModel!.nearByCarModel{
        let location = CLLocationCoordinate2D(latitude: model.location.latitude, longitude: model.location.longitude)
        
        let marker = GMSMarker()
        marker.position = location
        marker.snippet = model.vehicleDetails.name
        marker.map = mapView
    }
}

}

// MARK: Delegate for presenting data
extension NearByCars_ViewController: NearByCars_DisplayLogic {
    
    func displayNearByCars(viewModel: NearByCars_.Fetch.ViewModel) {
        self.viewModel = viewModel
        DispatchQueue.main.async {
            self.tableView.reloadData()
            self.showCarLocationsOnMap()
        }
    }
}

// MARK: UITableView DataSource & Delegate
extension NearByCars_ViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return (viewModel?.nearByCarModel ?? []).count
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 65
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cell = tableView.dequeueReusableCell(withIdentifier: "NearByCarTableCell", for: indexPath) as! NearByCarTableCell
        cell.selectionStyle = .none
        
        cell.configure(model: viewModel!.nearByCarModel[indexPath.row])
        
        return cell
    }
}

